// Generated by view binder compiler. Do not edit!
package com.example.samplebooks.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.samplebooks.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView format;

  @NonNull
  public final TextView formatEdit;

  @NonNull
  public final TextView identifier;

  @NonNull
  public final TextView identifierEdit;

  @NonNull
  public final TextView language;

  @NonNull
  public final TextView languageEdit;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView nameEdit;

  private ListItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView format,
      @NonNull TextView formatEdit, @NonNull TextView identifier, @NonNull TextView identifierEdit,
      @NonNull TextView language, @NonNull TextView languageEdit, @NonNull TextView name,
      @NonNull TextView nameEdit) {
    this.rootView = rootView;
    this.format = format;
    this.formatEdit = formatEdit;
    this.identifier = identifier;
    this.identifierEdit = identifierEdit;
    this.language = language;
    this.languageEdit = languageEdit;
    this.name = name;
    this.nameEdit = nameEdit;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.format;
      TextView format = ViewBindings.findChildViewById(rootView, id);
      if (format == null) {
        break missingId;
      }

      id = R.id.format_edit;
      TextView formatEdit = ViewBindings.findChildViewById(rootView, id);
      if (formatEdit == null) {
        break missingId;
      }

      id = R.id.identifier;
      TextView identifier = ViewBindings.findChildViewById(rootView, id);
      if (identifier == null) {
        break missingId;
      }

      id = R.id.identifier_edit;
      TextView identifierEdit = ViewBindings.findChildViewById(rootView, id);
      if (identifierEdit == null) {
        break missingId;
      }

      id = R.id.language;
      TextView language = ViewBindings.findChildViewById(rootView, id);
      if (language == null) {
        break missingId;
      }

      id = R.id.language_edit;
      TextView languageEdit = ViewBindings.findChildViewById(rootView, id);
      if (languageEdit == null) {
        break missingId;
      }

      id = R.id.name;
      TextView name = ViewBindings.findChildViewById(rootView, id);
      if (name == null) {
        break missingId;
      }

      id = R.id.name_edit;
      TextView nameEdit = ViewBindings.findChildViewById(rootView, id);
      if (nameEdit == null) {
        break missingId;
      }

      return new ListItemBinding((ConstraintLayout) rootView, format, formatEdit, identifier,
          identifierEdit, language, languageEdit, name, nameEdit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
